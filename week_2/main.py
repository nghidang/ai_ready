import os
import json
from pathlib import Path
from dotenv import load_dotenv
import openai

# Load environment variables from .env file
load_dotenv()

# Read configuration from environment variables
model = os.getenv('MODEL')
base_url = os.getenv('OPENAI_BASE_URL')
api_key = os.getenv('OPENAI_API_KEY')
if not model:
    raise ValueError("MODEL is not set in .env file")
if not base_url:
    raise ValueError("OPENAI_BASE_URL is not set in .env file")
if not api_key:
    raise ValueError("OPENAI_API_KEY is not set in .env file")

client = openai.OpenAI(
    base_url=base_url,
    api_key=api_key
)

# 1. Define a list of callable tools for the model
tools = [
    {
        "type": "function",
        "function": {
            "name": "get_horoscope",
            "description": "Get today's horoscope for an astrological sign.",
            "parameters": {
                "type": "object",
                "properties": {
                    "sign": {
                        "type": "string",
                        "description": "An astrological sign like Taurus or Aquarius",
                    },
                },
                "required": ["sign"],
            },
        },
    },
]

def get_horoscope(sign):
    return f"{sign}: Next Tuesday you will befriend a baby otter."

# Create a running input list we will add to over time
input_list = [
    {"role": "user", "content": "What is my horoscope? I am an Aquarius."}
]

# 2. Prompt the model with tools defined
response = client.chat.completions.create(
    model=model,
    tools=tools,
    messages=input_list,
)

# Process the response and append to input_list
for choice in response.choices:
    if choice.message.tool_calls:
        for tool_call in choice.message.tool_calls:
            print("Tool call:")
            print(json.dumps(tool_call.model_dump(), indent=2))

            if tool_call.function.name == "get_horoscope":
                # 3. Execute the function logic for get_horoscope
                arguments = json.loads(tool_call.function.arguments)
                horoscope = get_horoscope(arguments["sign"])

                # 4. Append the tool call and its result to input_list
                input_list.append({
                    "role": "assistant",
                    "content": None,
                    "tool_calls": [{
                        "id": tool_call.id,
                        "type": "function",
                        "function": {
                            "name": tool_call.function.name,
                            "arguments": tool_call.function.arguments
                        }
                    }]
                })
                input_list.append({
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "name": tool_call.function.name,
                    "content": json.dumps({
                        "horoscope": horoscope
                    })
                })

print("Final input:")
print(json.dumps(input_list, indent=2))

# 5. Prompt the model again with the updated input_list
input_list_with_instructions = [
    {
        "role": "system",
        "content": "Respond only with a horoscope generated by a tool."
    }
] + input_list

response = client.chat.completions.create(
    model=model,
    tools=tools,
    messages=input_list_with_instructions,
)

# 6. Print the final output
print("Final output:")
print("\n" + response.choices[0].message.content)